plugins {
  id 'org.ajoberstar.grgit' version '2.2.0'
  id 'org.ajoberstar.reckon' version '0.6.0'
  id 'com.diffplug.gradle.spotless' version '3.10.0'

  id 'gradle-clojure.clojure' version '0.3.1' apply false
  id 'org.ajoberstar.stutter' version '0.3.0' apply false
  id 'com.gradle.plugin-publish' version '0.9.10' apply false
  id 'nebula.maven-resolved-dependencies' version '7.0.10' apply false

  // TODO remove when Gradle dependency locking is available
  id 'nebula.dependency-lock' version '5.0.4' apply false
}

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
allprojects {
  apply plugin: 'nebula.dependency-lock'

  repositories {
    jcenter()
    maven {
      name = 'Clojars'
      url = 'https://clojars.org/repo'
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Packaging
///////////////////////////////////////////////////////////////////////////////
allprojects {
  group = 'io.github.gradle-clojure'

  plugins.withId('java') {
    sourceCompatibility = 8

    task sourcesJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Publishing
///////////////////////////////////////////////////////////////////////////////
allprojects {
  plugins.withId('maven-publish') {
    // make sure we don't publish any version ranges in our POMs
    apply plugin: 'nebula.maven-resolved-dependencies'

    // Publish to following repositories
    publishing {
      repositories {
        maven {
          name = 'bintray'
          url = 'https://api.bintray.com/maven/gradle-clojure/maven/gradle-clojure/;publish=1'
          credentials {
            username = System.env['BINTRAY_USER']
            password = System.env['BINTRAY_KEY']
          }
        }
        maven {
          name = 'clojars'
          url = 'https://clojars.org/repo'
          credentials {
            username = System.env['CLOJARS_USER']
            password = System.env['CLOJARS_PASSWORD']
          }
        }
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Versioning and Release
///////////////////////////////////////////////////////////////////////////////
reckon {
  normal = scopeFromProp()
  preRelease = stageFromProp('beta', 'rc', 'final')
}

// safety checks before a release
reckonTagCreate.doFirst {
  if (grgit.branch.current().name != 'master') {
    throw new IllegalStateException('Can only release from master')
  }

  // if making a final release, ensure we made an rc first
  if (!version.contains('-')) {
    def head = grgit.head()
    def tagsOnHead = grgit.tag.list().findAll { it.commit == head }
    if (!tagsOnHead.find { it.name.startsWith('${version}-rc.') }) {
      throw new IllegalStateException('Must release an rc of this commit before making a final.')
    }
  }
}

// make sure tests pass before tagging the version
allprojects {
  tasks.matching { it.name == 'check' }.all { task ->
    rootProject.tasks.reckonTagCreate.dependsOn task
  }
}

///////////////////////////////////////////////////////////////////////////////
// Code Style and Formatting
///////////////////////////////////////////////////////////////////////////////
allprojects {
  apply plugin: 'com.diffplug.gradle.spotless'

  plugins.withId('java') {
    spotless {
      java {
        importOrder 'java', 'javax', ''
        removeUnusedImports()
        eclipse().configFile rootProject.file('gradle/eclipse-java-formatter.xml')
      }
      format('gradle') {
        target '**/*.gradle'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
      }
    }
  }
}
